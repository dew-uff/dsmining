from src.states import NB_LOADED, CELL_LOADED


def stub_load_cells(lc_repository_id, lc_nbrow, lc_notebook, lc_status):   # noqa: F841
    _nbrow = {
                "repository_id": 1,
                "name": "test.ipynb",
                "nbformat": "4.0",
                "kernel": "python3",
                "language": "python",
                "language_version": "3.5.1",
                "max_execution_count": 0,
                "total_cells": 28,
                "code_cells": 9,
                "code_cells_with_output": 0,
                "markdown_cells": 19,
                "raw_cells": 0,
                "unknown_cell_formats": 0,
                "empty_cells": 0,
                "state": NB_LOADED,
            }
    _cells_info = [
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 0,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "# Running Code",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 1,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "First and foremost, the Jupyter Notebook is an interactive environment for writing and running code. The notebook is capable of running code in a wide range of languages. However, each notebook is associated with a single kernel.  This notebook is associated with the IPython kernel, therefore runs Python code.",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 2,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "## Code cells allow you to enter and run code",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 3,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "Run a code cell using `Shift-Enter` or pressing the <button class='btn btn-default btn-xs'><i class=\"icon-step-forward fa fa-play\"></i></button> button in the toolbar above:",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 4,
                        "cell_type": "code",
                        "execution_count": 2,
                        "lines": 1,
                        "output_formats": "",
                        "source": "a = 10\n",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 5,
                        "cell_type": "code",
                        "execution_count": 3,
                        "lines": 1,
                        "output_formats": "",
                        "source": "print(a)\n",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 6,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 4,
                        "output_formats": "",
                        "source": "There are two other keyboard shortcuts for running code:\n\n* `Alt-Enter` runs the current cell and inserts a new one below.\n* `Ctrl-Enter` run the current cell and enters command mode.",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 7,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "## Managing the Kernel",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 8,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "Code is run in a separate process called the Kernel.  The Kernel can be interrupted or restarted.  Try running the following cell and then hit the <button class='btn btn-default btn-xs'><i class='icon-stop fa fa-stop'></i></button> button in the toolbar above.",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 9,
                        "cell_type": "code",
                        "execution_count": 4,
                        "lines": 2,
                        "output_formats": "",
                        "source": "import time\ntime.sleep(10)\n",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 10,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 2,
                        "output_formats": "",
                        "source": "If the Kernel dies you will be prompted to restart it. Here we call the low-level system libc.time routine with the wrong argument via\nctypes to segfault the Python interpreter:",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 11,
                        "cell_type": "code",
                        "execution_count": 5,
                        "lines": 10,
                        "output_formats": "",
                        "source": "import sys\nfrom ctypes import CDLL\n# This will crash a Linux or Mac system\n# equivalent calls can be made on Windows\n\n# Uncomment these lines if you would like to see the segfault\n\n# dll = 'dylib' if sys.platform == 'darwin' else 'so.6'\n# libc = CDLL(\"libc.%s\" % dll) \n# libc.time(-1)  # BOOM!!\n",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 12,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "## Cell menu",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 13,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 7,
                        "output_formats": "",
                        "source": 'The "Cell" menu has a number of menu items for running code in different ways. These includes:\n\n* Run and Select Below\n* Run and Insert Below\n* Run All\n* Run All Above\n* Run All Below',
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 14,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "## Restarting the kernels",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 15,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "The kernel maintains the state of a notebook's computations. You can reset this state by restarting the kernel. This is done by clicking on the <button class='btn btn-default btn-xs'><i class='fa fa-repeat icon-repeat'></i></button> in the toolbar above.",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 16,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "## sys.stdout and sys.stderr",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 17,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "The stdout and stderr streams are displayed as text in the output area.",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 18,
                        "cell_type": "code",
                        "execution_count": 6,
                        "lines": 1,
                        "output_formats": "",
                        "source": 'print("hi, stdout")\n',
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 19,
                        "cell_type": "code",
                        "execution_count": 7,
                        "lines": 2,
                        "output_formats": "",
                        "source": "from __future__ import print_function\nprint('hi, stderr', file=sys.stderr)\n",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 20,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "## Output is asynchronous",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 21,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "All output is displayed asynchronously as it is generated in the Kernel. If you execute the next cell, you will see the output one piece at a time, not all at the end.",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 22,
                        "cell_type": "code",
                        "execution_count": 8,
                        "lines": 4,
                        "output_formats": "",
                        "source": "import time, sys\nfor i in range(8):\n    print(i)\n    time.sleep(0.5)\n",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 23,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "## Large outputs",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 24,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "To better handle large outputs, the output area can be collapsed. Run the following cell and then single- or double- click on the active area to the left of the output:",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 25,
                        "cell_type": "code",
                        "execution_count": 9,
                        "lines": 2,
                        "output_formats": "",
                        "source": "for i in range(50):\n    print(i)\n",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 26,
                        "cell_type": "markdown",
                        "execution_count": None,
                        "lines": 1,
                        "output_formats": "",
                        "source": "Beyond a certain point, output will scroll automatically:",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                    {
                        "repository_id": 1,
                        "notebook_id": None,
                        "index": 27,
                        "cell_type": "code",
                        "execution_count": 10,
                        "lines": 2,
                        "output_formats": "",
                        "source": "for i in range(500):\n    print(2**i - 1)\n",
                        "python": True,
                        "state": CELL_LOADED,
                    },
                  ]
    _exec_count = 10
    _status = NB_LOADED
    return _nbrow, _cells_info, _exec_count, _status


def stub_load_no_cells(lc_repository_id, lc_nbrow, lc_notebook, lc_status):  # noqa: F841
    _nbrow = {
                "repository_id": 1,
                "name": "test.ipynb",
                "nbformat": "4.0",
                "kernel": "python3",
                "language": "python",
                "language_version": "3.5.1",
                "max_execution_count": 0,
                "total_cells": 0,
                "code_cells": 9,
                "code_cells_with_output": 0,
                "markdown_cells": 19,
                "raw_cells": 0,
                "unknown_cell_formats": 0,
                "empty_cells": 0,
                "state": NB_LOADED,
            }
    _cells_info = []
    _exec_count = 10
    _status = 0
    return _nbrow, _cells_info, _exec_count, _status
